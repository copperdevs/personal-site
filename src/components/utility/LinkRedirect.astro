---
interface Props {
  badUrls: string[];
  targetUrl: string;
}

const { badUrls, targetUrl } = Astro.props;
---

<script is:inline define:vars={{ badUrls, targetUrl }}>
  document.addEventListener("DOMContentLoaded", checkUrl);
  document.addEventListener("astro:after-swap", checkUrl);

  async function checkUrl() {
    if (badUrls.includes(document.location.host)) {
      const newTargetSite = `https://${targetUrl}${document.location.pathname}`;

      const siteExists = await urlExists(newTargetSite);

      if (siteExists) document.location.href = newTargetSite;
    }
  }

  async function urlExists(url) {
    try {
      const response = await fetch(url);

      if (!response.ok) {
        console.log(`URL does not exist: ${url}`);
        return false;
      }

      console.log(`URL exists: ${url}`);
      return true;
    } catch (error) {
      console.log(`Error checking URL: ${error}`);
      return false;
    }
  }
</script>
