---
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import NavBar from "../../components/NavBar.astro";
import ProjectItem from "../../components/ProjectItem.astro";
import ProjectCategoryIcon from "../../components/ProjectCategoryIcon.astro";

const projects = await getCollection("projects");
const visibleProjects = projects.filter((project) => !project.data.hidden);

// group projects by category
const groupedProjects = visibleProjects.reduce((acc, project) => {
  const category = project.data.category;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(project);
  return acc;
}, {});

// Optionally sort categories and projects within categories
const sortedCategories = Object.keys(groupedProjects).sort();
sortedCategories.forEach((category) => {
  groupedProjects[category].sort((a, b) =>
    a.data.title.localeCompare(b.data.title)
  );
});
---

<Layout title="projects">
  <NavBar active="projects" />

  <section>
    {
      sortedCategories.map((category) => (
        <>
          <h2 class="project-category-header">
            {category}
            <div>
              <ProjectCategoryIcon category={category} />
            </div>
          </h2>
          <hr />
          {groupedProjects[category].map((project, index) => (
            <>
              <ProjectItem
                title={project.data.title}
                description={project.data.description}
                url={project.data.link}
                source={project.data.source}
              />
              {index < groupedProjects[category].length - 1 && <hr />}
              {!(index < groupedProjects[category].length - 1) && (<br /><br />)}
            </>
          ))}
        </>
      ))
    }
  </section>
</Layout>
